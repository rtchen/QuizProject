package backend;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.*;

public class QuizManager {

	private  static Connection con;
	
	public QuizManager() {
		con =  MyDBInfo.getConnection();
	}
	 private void check() {
		
			while (con == null) { 
				con = MyDBInfo.getConnection();
			}
	        
		}
	public ArrayList<Quiz> getAllQuizzes() { 
		ArrayList<Quiz> quizList = new ArrayList<Quiz>();
		ResultSet rs = null;
       try {
			check();
			Statement stmt = con.createStatement();
			rs = stmt.executeQuery("SELECT * FROM quizzes;");
			while (rs.next()) {
				quizList.add(new Quiz(rs));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return quizList;
	}
	//Gets a master list of quizzes from the database.
	public ArrayList<Quiz> getQuizzes() {
		ArrayList<Quiz> quizList = new ArrayList<Quiz>();
		ResultSet rs = null;
		try {
			check();
			Statement stmt = con.createStatement();
			rs = stmt.executeQuery("SELECT * FROM quizzes");
			while (rs.next()) {
				quizList.add(new Quiz(rs));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return quizList;
	}
	
	//Gets a list of quizzes that a user has created.
	public ArrayList<Quiz> getUserQuizzes(String username) {
		ArrayList<Quiz> quizList = new ArrayList<Quiz>();
		ResultSet rs = null;
        try {
			check();
			Statement stmt = con.createStatement();
			rs = stmt.executeQuery("SELECT * FROM quizzes WHERE Username=" + format(username));
			while (rs.next()) {
				quizList.add(new Quiz(rs));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return quizList;
	}
	
	//Gets a list of quizzes that are in a category.
	public ArrayList<Quiz> getQuizzesByCategory(String category) {
		ArrayList<Quiz> quizList = new ArrayList<Quiz>();
		ResultSet rs = null;
		
		try {
			check();
			Statement stmt = con.createStatement();
			rs = stmt.executeQuery("SELECT * FROM quizzes WHERE Category=" + format(category));
			while (rs.next()) {
				quizList.add(new Quiz(rs));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return quizList;
	}
	
	//If a user wants to search the quizzes by tags, he/she can enter a list of tags
	//and this will get all the quizzes with at least one of those tags.
	public ArrayList<Quiz> getQuizzesByTags(ArrayList<String> tags) {
		ArrayList<Quiz> quizList = new ArrayList<Quiz>();
		ResultSet rs = null;
		check();
		try {
			Statement stmt = con.createStatement();
			StringBuilder query = new StringBuilder();
			query.append("SELECT DISTINCT QuizID FROM quiz-tags WHERE Tag=" + tags.get(0));
			for (int i = 1; i < tags.size(); i++) {
				query.append(" OR Tag=" + tags.get(i));
			}
			rs = stmt.executeQuery(query.toString());
			while (rs.next()) {
				quizList.add(getQuiz(rs.getInt(1)));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return quizList;
	}
	
	//Gets a specific quiz from the quizID.
	public Quiz getQuiz(int quizID) {
		Quiz quiz = null;
		ResultSet rs = null;
		check();
		try {
			Statement stmt = con.createStatement();
			rs = stmt.executeQuery("SELECT * FROM quizzes WHERE QuizID=" + quizID);
			while(rs.next()){
			quiz = new Quiz(rs);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return quiz;
	}
	public ArrayList<Quiz> getPopularQuiz(){
		ArrayList<Quiz> quizzes = getQuizzes();
		ArrayList<Quiz> popular = new ArrayList<Quiz>();
		int size = quizzes.size();
		for (int i =0;i<size;i++){
			for(int j=i+1;j<size;j++){
			Quiz qi = quizzes.get(i);
			Quiz qj = quizzes.get(j);
		    if(qi.getRating()<qj.getRating())
		    	Collections.swap(quizzes, i, j);
			}
		}
		for(int i=0;i<size &&i<5;i++){
			Quiz q = quizzes.get(i);
			popular.add(q);
		}
		return popular;
	}
	public ArrayList<Quiz> getRecent(){
		ArrayList<Quiz> recent = new ArrayList<Quiz>();
		ResultSet rs = null;
        try {
			check();
			Statement stmt = con.createStatement();
			rs = stmt.executeQuery("SELECT quizID FROM quizzes ORDER BY Creation_Date DESC LIMIT 5;");
			while (rs.next()) {
				recent.add(getQuiz(rs.getInt(1)));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return recent;
	}
	public ArrayList<Quiz> getMyCreated(String username){
		ArrayList<Quiz> my = new ArrayList<Quiz>();
		ResultSet rs = null;
        try {
			check();
			Statement stmt = con.createStatement();
			rs = stmt.executeQuery("SELECT quizID FROM quizzes WHERE Username = "+format(username) +" ORDER BY Creation_Date DESC LIMIT 5;");
			while (rs.next()) {
				my.add(getQuiz(rs.getInt(1)));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return my;
	}
	private String format(String str) {
		return "\'" + str + "\'";
	}
}
